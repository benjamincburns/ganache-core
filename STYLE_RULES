- Two space indent
- Avoid semicolons
- Prefer import syntax over require syntax
- TypeScript only
- Avoid use of the `any` type
- Parent types shouldn't reference child types
- Define simple types as classes so that `instanceof` still works
- Define interfaces for complex types, too
- Type assertions are ugly - prefer type guards instead
- If introducing a new dependency, it must have a type declaration file, or you must create one
- Complex type unions are a surefire sign that you're trying to do too much in one place
- Avoid hex strings everywhere except the RPC module's serialization/deserialization logic
- Only use the "to.ts" module in the RPC module's serialization/deserialization logic, and in tests
- Format multiline function signatures like so:

function functionName (
    name: string,
    db: AbstractLevelDOWN<KeyType, ValueType>,
    encode: Transformer<ValueType, SerializedType>,
    decode: <SerializedType, ValueType>
) : ReturnType {
  // function body
}

